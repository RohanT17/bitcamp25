{"ast":null,"code":"var _jsxFileName = \"/Users/thushanr/Desktop/bitcamp25/client/src/StudyAids.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './StudyAids.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudyAids() {\n  _s();\n  console.log(process.env.REACT_APP_OPENROUTER_API_KEY);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [conversations, setConversations] = useState([]); // Store conversations list\n  const [conversationCount, setConversationCount] = useState(0); // To keep track of the number of conversations\n  const [currentConversation, setCurrentConversation] = useState(null); // To track the current conversation\n\n  const sendMessage = async () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: 'patient'\n      };\n      setMessages(prev => [...prev, userMessage]);\n      setInput('');\n      const systemMessage = 'You are a smart and friendly study assistant designed to help users learn more effectively. ' + 'You help users by creating mind maps, summarizing notes, and providing useful, personalized study insights. ' + 'Before giving advice or generating study materials, ask at least 3 clarifying questions—one at a time—about the topic, the user’s goals, and their preferred study style. ' + 'Each question can build on the previous one or explore related areas of the topic. ' + 'Once you have enough information, offer organized, helpful study content based on their answers.';\n      try {\n        const response = await axios.post('https://openrouter.ai/api/v1/chat/completions',\n        // OpenRouter API endpoint\n        {\n          model: \"deepseek/deepseek-chat\",\n          // OpenRouter model\n          messages: [{\n            role: 'system',\n            content: systemMessage\n          }, ...messages.map(msg => ({\n            role: msg.sender === 'patient' ? 'user' : 'assistant',\n            content: msg.text\n          })), {\n            role: 'user',\n            content: `Study context: ${input}`\n          }]\n        }, {\n          headers: {\n            Authorization: `Bearer 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`,\n            'Content-Type': 'application/json'\n          }\n        });\n        const botMessage = {\n          text: response.data.choices[0].message.content,\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error('Error calling OpenRouter API:', error);\n        setMessages(prevMessages => [...prevMessages, {\n          text: 'Error: Unable to get a response from the chatbot.',\n          sender: 'bot'\n        }]);\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n  const startNewConversation = () => {\n    setMessages([]); // Clear the messages for a new conversation\n    setInput(''); // Optionally clear the input field as well\n\n    // Increment conversation count and add a new conversation to the list\n    setConversationCount(prev => prev + 1);\n    setConversations(prevConvs => [...prevConvs, `Conversation ${conversationCount + 1}`]);\n    setCurrentConversation(conversationCount + 1); // Set the new conversation as current\n  };\n\n  // Function to load a specific conversation\n  const loadConversation = index => {\n    setCurrentConversation(index + 1); // Set the conversation number\n    setMessages([]); // Clear messages\n    // Here, you can load the respective conversation if needed from the stored data\n    // For example, if you're saving message history, load it accordingly.\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversations-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Previous Conversations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: conversations.length > 0 ? conversations.map((conv, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => loadConversation(index),\n            children: conv\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No conversations yet. Start a new one!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-conversation-btn\",\n          onClick: startNewConversation,\n          children: \"Start New Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbox-messages\",\n          children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No conversations yet. Start by typing a message below.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender === 'patient' ? 'sent' : 'received'}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbox-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            onKeyDown: handleKeyPress,\n            placeholder: \"Type your message here...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(StudyAids, \"na/Td///WP69Nkww/0RnEptXyJk=\");\n_c = StudyAids;\nexport default StudyAids;\nvar _c;\n$RefreshReg$(_c, \"StudyAids\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","StudyAids","_s","console","log","process","env","REACT_APP_OPENROUTER_API_KEY","messages","setMessages","input","setInput","conversations","setConversations","conversationCount","setConversationCount","currentConversation","setCurrentConversation","sendMessage","trim","userMessage","text","sender","prev","systemMessage","response","post","model","role","content","map","msg","headers","Authorization","botMessage","data","choices","message","prevMessages","error","handleKeyPress","e","key","preventDefault","startNewConversation","prevConvs","loadConversation","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","conv","onClick","type","value","onChange","target","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["/Users/thushanr/Desktop/bitcamp25/client/src/StudyAids.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './StudyAids.css';\n\nfunction StudyAids() {\n  console.log(process.env.REACT_APP_OPENROUTER_API_KEY);\n\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [conversations, setConversations] = useState([]); // Store conversations list\n  const [conversationCount, setConversationCount] = useState(0); // To keep track of the number of conversations\n  const [currentConversation, setCurrentConversation] = useState(null); // To track the current conversation\n\n  const sendMessage = async () => {\n    if (input.trim()) {\n      const userMessage = { text: input, sender: 'patient' };\n      setMessages((prev) => [...prev, userMessage]);\n      setInput('');\n\n      const systemMessage =\n        'You are a smart and friendly study assistant designed to help users learn more effectively. ' +\n        'You help users by creating mind maps, summarizing notes, and providing useful, personalized study insights. ' +\n        'Before giving advice or generating study materials, ask at least 3 clarifying questions—one at a time—about the topic, the user’s goals, and their preferred study style. ' +\n        'Each question can build on the previous one or explore related areas of the topic. ' +\n        'Once you have enough information, offer organized, helpful study content based on their answers.';\n\n      try {\n        const response = await axios.post(\n          'https://openrouter.ai/api/v1/chat/completions',  // OpenRouter API endpoint\n          {\n            model: \"deepseek/deepseek-chat\",  // OpenRouter model\n            messages: [\n              { role: 'system', content: systemMessage },\n              ...messages.map((msg) => ({\n                role: msg.sender === 'patient' ? 'user' : 'assistant',\n                content: msg.text,\n              })),\n              { role: 'user', content: `Study context: ${input}` },\n            ],\n          },\n          {\n            headers: {\n              Authorization: `Bearer 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`,\n              'Content-Type': 'application/json',\n            },\n          }\n        );\n\n        const botMessage = {\n          text: response.data.choices[0].message.content,\n          sender: 'bot',\n        };\n\n        setMessages((prevMessages) => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error('Error calling OpenRouter API:', error);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          {\n            text: 'Error: Unable to get a response from the chatbot.',\n            sender: 'bot',\n          },\n        ]);\n      }\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const startNewConversation = () => {\n    setMessages([]);  // Clear the messages for a new conversation\n    setInput('');  // Optionally clear the input field as well\n\n    // Increment conversation count and add a new conversation to the list\n    setConversationCount((prev) => prev + 1);\n    setConversations((prevConvs) => [\n      ...prevConvs,\n      `Conversation ${conversationCount + 1}`,\n    ]);\n    setCurrentConversation(conversationCount + 1); // Set the new conversation as current\n  };\n\n  // Function to load a specific conversation\n  const loadConversation = (index) => {\n    setCurrentConversation(index + 1); // Set the conversation number\n    setMessages([]); // Clear messages\n    // Here, you can load the respective conversation if needed from the stored data\n    // For example, if you're saving message history, load it accordingly.\n  };\n\n  return (\n    <div className=\"chatbot-page\">\n      <div className=\"container\">\n        <div className=\"conversations-list\">\n          <h3>Previous Conversations</h3>\n          <ul>\n            {conversations.length > 0 ? (\n              conversations.map((conv, index) => (\n                <li key={index} onClick={() => loadConversation(index)}>\n                  {conv}\n                </li>\n              ))\n            ) : (\n              <p>No conversations yet. Start a new one!</p>\n            )}\n          </ul>\n          <button className=\"new-conversation-btn\" onClick={startNewConversation}>\n            Start New Conversation\n          </button>\n        </div>\n\n        <div className=\"chatbox\">\n          <div className=\"chatbox-messages\">\n            {messages.length === 0 && (\n              <p>No conversations yet. Start by typing a message below.</p>\n            )}\n            {messages.map((msg, index) => (\n              <div\n                key={index}\n                className={`message ${msg.sender === 'patient' ? 'sent' : 'received'}`}\n              >\n                <p>{msg.text}</p>\n              </div>\n            ))}\n          </div>\n          <div className=\"chatbox-input\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Type your message here...\"\n            />\n            <button onClick={sendMessage}>Send</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default StudyAids;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}