{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\genew\\\\Desktop\\\\BitCamp25\\\\bitcamp25\\\\client\\\\src\\\\MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport \"./MindMap.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MindMap() {\n  _s();\n  const [mindMapData, setMindMapData] = useState(null);\n  const handleGenerateMindMap = async () => {\n    try {\n      const response = await fetch(\"/mindmap.json\");\n      if (!response.ok) {\n        throw new Error(\"Failed to load mind map data.\");\n      }\n      const data = await response.json();\n\n      // Assign curvature to links to distinguish multiple links between the same nodes\n      const linkCounts = {};\n      data.links.forEach(link => {\n        const key = `${link.source}-${link.target}`;\n        linkCounts[key] = (linkCounts[key] || 0) + 1;\n        link.curvature = 0.1 * linkCounts[key]; // Adjust curvature as needed\n      });\n      setMindMapData(data);\n    } catch (error) {\n      console.error(\"Error loading mind map:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mind Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateMindMap,\n      children: \"Generate Mind Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), mindMapData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mindmap-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Extracted Key Concepts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n        graphData: mindMapData,\n        nodeLabel: \"keyword\",\n        nodeAutoColorBy: \"id\",\n        linkCurvature: \"curvature\",\n        linkDirectionalParticles: 2,\n        linkDirectionalParticleSpeed: 0.005\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transcript Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [mindMapData.raw_text.slice(0, 500), \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(MindMap, \"39rbu2oUba7fZ5qbnk67e/ThNIc=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","ForceGraph2D","jsxDEV","_jsxDEV","MindMap","_s","mindMapData","setMindMapData","handleGenerateMindMap","response","fetch","ok","Error","data","json","linkCounts","links","forEach","link","key","source","target","curvature","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","graphData","nodeLabel","nodeAutoColorBy","linkCurvature","linkDirectionalParticles","linkDirectionalParticleSpeed","raw_text","slice","_c","$RefreshReg$"],"sources":["C:/Users/genew/Desktop/BitCamp25/bitcamp25/client/src/MindMap.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport \"./MindMap.css\";\r\n\r\nfunction MindMap() {\r\n  const [mindMapData, setMindMapData] = useState(null);\r\n\r\n  const handleGenerateMindMap = async () => {\r\n    try {\r\n      const response = await fetch(\"/mindmap.json\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to load mind map data.\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      // Assign curvature to links to distinguish multiple links between the same nodes\r\n      const linkCounts = {};\r\n      data.links.forEach((link) => {\r\n        const key = `${link.source}-${link.target}`;\r\n        linkCounts[key] = (linkCounts[key] || 0) + 1;\r\n        link.curvature = 0.1 * linkCounts[key]; // Adjust curvature as needed\r\n      });\r\n\r\n      setMindMapData(data);\r\n    } catch (error) {\r\n      console.error(\"Error loading mind map:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mindmap-page\">\r\n      <h2>Mind Map</h2>\r\n      <button onClick={handleGenerateMindMap}>Generate Mind Map</button>\r\n      {mindMapData && (\r\n        <div className=\"mindmap-result\">\r\n          <h3>Extracted Key Concepts</h3>\r\n          <ForceGraph2D\r\n            graphData={mindMapData}\r\n            nodeLabel=\"keyword\"\r\n            nodeAutoColorBy=\"id\"\r\n            linkCurvature=\"curvature\"\r\n            linkDirectionalParticles={2}\r\n            linkDirectionalParticleSpeed={0.005}\r\n          />\r\n          <h3>Transcript Preview</h3>\r\n          <p>{mindMapData.raw_text.slice(0, 500)}...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}