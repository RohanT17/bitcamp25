{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\genew\\\\Desktop\\\\BitCamp25\\\\bitcamp25\\\\client\\\\src\\\\MGraph.js\",\n  _s = $RefreshSig$();\n// MGraph.js\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MGraph() {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch(\"/birds.json\").then(res => res.json()).then(raw => {\n      const cleaned = {\n        nodes: raw.nodes.map(({\n          id,\n          group\n        }) => ({\n          id,\n          group\n        })),\n        links: raw.links\n      };\n      setData(cleaned);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: data && /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: data,\n      nodeAutoColorBy: \"group\",\n      nodeCanvasObject: (node, ctx, globalScale) => {\n        const label = node.id;\n        const fontSize = 12 / globalScale;\n        ctx.font = `${fontSize}px Sans-Serif`;\n        const textWidth = ctx.measureText(label).width;\n        const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2);\n        ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n        ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = node.color;\n        ctx.fillText(label, node.x, node.y);\n        node.__bckgDimensions = bckgDimensions;\n      },\n      nodePointerAreaPaint: (node, color, ctx) => {\n        ctx.fillStyle = color;\n        const bckgDimensions = node.__bckgDimensions;\n        bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(MGraph, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = MGraph;\nvar _c;\n$RefreshReg$(_c, \"MGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","ForceGraph2D","jsxDEV","_jsxDEV","MGraph","_s","data","setData","fetch","then","res","json","raw","cleaned","nodes","map","id","group","links","style","width","height","children","graphData","nodeAutoColorBy","nodeCanvasObject","node","ctx","globalScale","label","fontSize","font","textWidth","measureText","bckgDimensions","n","fillStyle","fillRect","x","y","textAlign","textBaseline","color","fillText","__bckgDimensions","nodePointerAreaPaint","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/genew/Desktop/BitCamp25/bitcamp25/client/src/MGraph.js"],"sourcesContent":["// MGraph.js\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\n\r\nexport default function MGraph() {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/birds.json\")\r\n      .then((res) => res.json())\r\n      .then((raw) => {\r\n        const cleaned = {\r\n          nodes: raw.nodes.map(({ id, group }) => ({ id, group })),\r\n          links: raw.links,\r\n        };\r\n        setData(cleaned);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\r\n      {data && (\r\n        <ForceGraph2D\r\n          graphData={data}\r\n          nodeAutoColorBy=\"group\"\r\n          nodeCanvasObject={(node, ctx, globalScale) => {\r\n            const label = node.id;\r\n            const fontSize = 12 / globalScale;\r\n            ctx.font = `${fontSize}px Sans-Serif`;\r\n            const textWidth = ctx.measureText(label).width;\r\n            const bckgDimensions = [textWidth, fontSize].map(\r\n              (n) => n + fontSize * 0.2\r\n            );\r\n\r\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\r\n            ctx.fillRect(\r\n              node.x - bckgDimensions[0] / 2,\r\n              node.y - bckgDimensions[1] / 2,\r\n              ...bckgDimensions\r\n            );\r\n\r\n            ctx.textAlign = \"center\";\r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = node.color;\r\n            ctx.fillText(label, node.x, node.y);\r\n\r\n            node.__bckgDimensions = bckgDimensions;\r\n          }}\r\n          nodePointerAreaPaint={(node, color, ctx) => {\r\n            ctx.fillStyle = color;\r\n            const bckgDimensions = node.__bckgDimensions;\r\n            bckgDimensions &&\r\n              ctx.fillRect(\r\n                node.x - bckgDimensions[0] / 2,\r\n                node.y - bckgDimensions[1] / 2,\r\n                ...bckgDimensions\r\n              );\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}